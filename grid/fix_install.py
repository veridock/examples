#!/usr/bin/env python3
"""
Skrypt naprawczy dla problem√≥w z instalacjƒÖ SVG Browser
"""

import sys
import subprocess
import os
from pathlib import Path

def clear_poetry_cache():
    """Czy≈õci cache Poetry"""
    print("üßπ Czyszczenie cache Poetry...")
    try:
        subprocess.run(['poetry', 'cache', 'clear', '--all', 'pypi'], 
                      capture_output=True, check=False)
        print("‚úÖ Cache Poetry wyczyszczony")
    except FileNotFoundError:
        print("‚ö†Ô∏è  Poetry nie jest zainstalowane")

def reset_virtualenv():
    """Resetuje ≈õrodowisko wirtualne Poetry"""
    print("üîÑ Resetowanie ≈õrodowiska wirtualnego...")
    try:
        # Usu≈Ñ obecne ≈õrodowisko
        result = subprocess.run(['poetry', 'env', 'info', '--path'], 
                              capture_output=True, text=True, check=False)
        if result.returncode == 0:
            env_path = result.stdout.strip()
            subprocess.run(['poetry', 'env', 'remove', 'python'], 
                          capture_output=True, check=False)
            print(f"‚úÖ Usuniƒôto ≈õrodowisko: {env_path}")
        
        # Stw√≥rz nowe
        subprocess.run(['poetry', 'env', 'use', 'python'], 
                      capture_output=True, check=False)
        print("‚úÖ Stworzone nowe ≈õrodowisko")
        
    except FileNotFoundError:
        print("‚ö†Ô∏è  Poetry nie jest zainstalowane")

def check_python_version():
    """Sprawdza wersjƒô Pythona"""
    print("üêç Sprawdzanie wersji Pythona...")
    version = sys.version_info
    print(f"Obecna wersja: {version.major}.{version.minor}.{version.micro}")
    
    if version < (3, 8, 1):
        print("‚ùå B≈ÅƒÑD: Wymagany Python 3.8.1 lub nowszy")
        print("üí° RozwiƒÖzania:")
        print("   1. Zainstaluj nowszego Pythona z https://python.org")
        print("   2. U≈ºyj pyenv do zarzƒÖdzania wersjami:")
        print("      pyenv install 3.11.0")
        print("      pyenv local 3.11.0")
        return False
    else:
        print("‚úÖ Wersja Pythona jest kompatybilna")
        return True

def try_pip_install():
    """Pr√≥buje instalacji przez pip jako alternatywa"""
    print("üîÑ Pr√≥ba instalacji przez pip...")
    try:
        # Sprawd≈∫ czy requirements.txt istnieje
        if not Path('requirements.txt').exists():
            print("‚ùå Brak pliku requirements.txt")
            return False
        
        # Zainstaluj przez pip
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], 
                      check=True)
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-e', '.'], 
                      check=True)
        print("‚úÖ Instalacja przez pip zako≈Ñczona")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå B≈ÇƒÖd instalacji pip: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå pip nie jest dostƒôpny")
        return False

def fix_pyproject_toml():
    """Naprawia wymagania Pythona w pyproject.toml"""
    print("üîß Sprawdzanie pyproject.toml...")
    
    pyproject_path = Path('pyproject.toml')
    if not pyproject_path.exists():
        print("‚ùå Brak pliku pyproject.toml")
        return False
    
    try:
        content = pyproject_path.read_text(encoding='utf-8')
        
        # Sprawd≈∫ czy trzeba naprawiƒá
        if 'python = "^3.8"' in content:
            print("üîß Naprawianie wymaga≈Ñ Pythona...")
            content = content.replace('python = "^3.8"', 'python = "^3.8.1"')
            pyproject_path.write_text(content, encoding='utf-8')
            print("‚úÖ pyproject.toml naprawiony")
            return True
        else:
            print("‚úÖ pyproject.toml ju≈º ma poprawne wymagania")
            return True
            
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd naprawiania pyproject.toml: {e}")
        return False

def main():
    """G≈Ç√≥wna funkcja naprawcza"""
    print("üîß SVG Browser - Naprawa instalacji")
    print("=" * 40)
    
    # Sprawd≈∫ Pythona
    if not check_python_version():
        return
    
    # Napraw pyproject.toml
    fix_pyproject_toml()
    
    print("\nüîÑ Opcje naprawy:")
    print("1. Resetowanie Poetry (zalecane)")
    print("2. Instalacja przez pip")
    print("3. Tylko czyszczenie cache")
    
    choice = input("\nWybierz opcjƒô (1-3): ").strip()
    
    if choice == "1":
        clear_poetry_cache()
        reset_virtualenv()
        print("\nüöÄ Spr√≥buj teraz: poetry install")
        
    elif choice == "2":
        if try_pip_install():
            print("\nüöÄ Instalacja zako≈Ñczona. Uruchom: python svg_browser/app.py")
        else:
            print("\n‚ùå Instalacja przez pip nie powiod≈Ça siƒô")
            
    elif choice == "3":
        clear_poetry_cache()
        print("\nüöÄ Spr√≥buj teraz: poetry install")
        
    else:
        print("‚ùå Nieprawid≈Çowy wyb√≥r")
    
    print("\nüí° Je≈õli nadal masz problemy:")
    print("   - Sprawd≈∫ czy masz Python 3.8.1+")
    print("   - U≈ºyj: python start.py (automatyczna diagnoza)")
    print("   - Zobacz INSTALL.md dla wiƒôcej opcji")

if __name__ == '__main__':
    main()

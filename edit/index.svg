<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1200 800" width="100%" height="100%">
  <defs>
    <!-- Gradients for modern look -->
    <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#1a1a1a;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#2d2d2d;stop-opacity:1" />
    </linearGradient>

    <linearGradient id="headerGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#333333;stop-opacity:0.95" />
      <stop offset="100%" style="stop-color:#404040;stop-opacity:0.95" />
    </linearGradient>

    <filter id="glow">
      <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>

  <!-- Background -->
  <rect width="100%" height="100%" fill="url(#bgGradient)"/>

  <!-- Header Bar -->
  <rect x="0" y="0" width="1200" height="60" fill="url(#headerGradient)" stroke="#444" stroke-width="1"/>

  <!-- Logo and Title -->
  <g transform="translate(20, 20)">
    <circle cx="10" cy="10" r="8" fill="#4a9eff"/>
    <text x="25" y="15" fill="#ffffff" font-family="Arial, sans-serif" font-size="16" font-weight="bold">Markdown Editor PWA</text>
  </g>

  <!-- Toolbar Buttons -->
  <g transform="translate(820, 15)">
    <rect x="0" y="0" width="70" height="30" rx="5" fill="rgba(74,158,255,0.1)" stroke="#4a9eff" stroke-width="1"/>
    <text x="35" y="20" fill="#4a9eff" font-family="Arial, sans-serif" font-size="11" text-anchor="middle">Pobierz MD</text>

    <rect x="80" y="0" width="80" height="30" rx="5" fill="rgba(74,158,255,0.1)" stroke="#4a9eff" stroke-width="1"/>
    <text x="120" y="20" fill="#4a9eff" font-family="Arial, sans-serif" font-size="11" text-anchor="middle">Pobierz HTML</text>

    <rect x="170" y="0" width="75" height="30" rx="5" fill="rgba(255,193,7,0.1)" stroke="#ffc107" stroke-width="1"/>
    <text x="207.5" y="20" fill="#ffc107" font-family="Arial, sans-serif" font-size="11" text-anchor="middle">Kopiuj HTML</text>

    <rect x="255" y="0" width="60" height="30" rx="5" fill="#4a9eff"/>
    <text x="285" y="20" fill="#1a1a1a" font-family="Arial, sans-serif" font-size="11" text-anchor="middle">Wyczy≈õƒá</text>
  </g>

  <!-- Main Content Area -->
  <rect x="0" y="60" width="1200" height="680" fill="#1e1e1e" stroke="#444" stroke-width="1"/>

  <!-- Editor Panel -->
  <g transform="translate(0, 60)">
    <!-- Panel Header -->
    <rect x="0" y="0" width="600" height="40" fill="rgba(68,68,68,0.8)" stroke="#555" stroke-width="1"/>
    <text x="15" y="25" fill="#ffffff" font-family="Arial, sans-serif" font-size="14" font-weight="600">üìù Edytor Markdown</text>
    <text x="550" y="25" fill="#4a9eff" font-family="Arial, sans-serif" font-size="12" text-anchor="end">Gotowy</text>

    <!-- Editor Content Background -->
    <rect x="0" y="40" width="600" height="600" fill="#1e1e1e"/>

    <!-- Sample Markdown Text with Syntax Highlighting -->
    <g transform="translate(15, 60)">
      <!-- Headers -->
      <text x="0" y="0" fill="#6ab7ff" font-family="Courier New, monospace" font-size="14" font-weight="bold"># Witaj w edytorze Markdown!</text>

      <text x="0" y="25" fill="#ffffff" font-family="Courier New, monospace" font-size="12">Wpisz tutaj sw√≥j tekst w formacie Markdown...</text>

      <text x="0" y="50" fill="#6ab7ff" font-family="Courier New, monospace" font-size="14" font-weight="bold">## Przyk≈Çady sk≈Çadni:</text>

      <!-- Bold/Italic -->
      <text x="0" y="80" fill="#ff6b6b" font-family="Courier New, monospace" font-size="12">**</text>
      <text x="15" y="80" fill="#ffffff" font-family="Courier New, monospace" font-size="12">Pogrubiony tekst</text>
      <text x="130" y="80" fill="#ff6b6b" font-family="Courier New, monospace" font-size="12">**</text>

      <text x="0" y="100" fill="#ffd93d" font-family="Courier New, monospace" font-size="12">*</text>
      <text x="10" y="100" fill="#ffffff" font-family="Courier New, monospace" font-size="12">Kursywa</text>
      <text x="55" y="100" fill="#ffd93d" font-family="Courier New, monospace" font-size="12">*</text>

      <!-- Lists -->
      <text x="0" y="130" fill="#a8e6cf" font-family="Courier New, monospace" font-size="12">- Lista element√≥w</text>
      <text x="0" y="150" fill="#a8e6cf" font-family="Courier New, monospace" font-size="12">- Drugi element</text>

      <!-- Numbered list -->
      <text x="0" y="180" fill="#ffb3ba" font-family="Courier New, monospace" font-size="12">1. Lista numerowana</text>
      <text x="0" y="200" fill="#ffb3ba" font-family="Courier New, monospace" font-size="12">2. Drugi element</text>

      <!-- Quote -->
      <text x="0" y="230" fill="#c7ceea" font-family="Courier New, monospace" font-size="12">&gt; Cytat</text>
      <text x="0" y="250" fill="#c7ceea" font-family="Courier New, monospace" font-size="12">&gt; Druga linia cytatu</text>

      <!-- Code block -->
      <text x="0" y="280" fill="#888" font-family="Courier New, monospace" font-size="12">```javascript</text>
      <text x="0" y="300" fill="#61dafb" font-family="Courier New, monospace" font-size="12">function</text>
      <text x="60" y="300" fill="#f7df1e" font-family="Courier New, monospace" font-size="12"> hello</text>
      <text x="105" y="300" fill="#ffffff" font-family="Courier New, monospace" font-size="12">() {</text>
      <text x="20" y="320" fill="#ffffff" font-family="Courier New, monospace" font-size="12">console.</text>
      <text x="75" y="320" fill="#f7df1e" font-family="Courier New, monospace" font-size="12">log</text>
      <text x="95" y="320" fill="#ffffff" font-family="Courier New, monospace" font-size="12">(</text>
      <text x="105" y="320" fill="#a8e6cf" font-family="Courier New, monospace" font-size="12">'Hello World!'</text>
      <text x="190" y="320" fill="#ffffff" font-family="Courier New, monospace" font-size="12">);</text>
      <text x="0" y="340" fill="#ffffff" font-family="Courier New, monospace" font-size="12">}</text>
      <text x="0" y="360" fill="#888" font-family="Courier New, monospace" font-size="12">```</text>

      <!-- Link -->
      <text x="0" y="390" fill="#ffffff" font-family="Courier New, monospace" font-size="12">[</text>
      <text x="8" y="390" fill="#6ab7ff" font-family="Courier New, monospace" font-size="12">Link do strony</text>
      <text x="105" y="390" fill="#ffffff" font-family="Courier New, monospace" font-size="12">](</text>
      <text x="118" y="390" fill="#a8e6cf" font-family="Courier New, monospace" font-size="12">https://example.com</text>
      <text x="235" y="390" fill="#ffffff" font-family="Courier New, monospace" font-size="12">)</text>

      <!-- Table -->
      <text x="0" y="420" fill="#ff9ff3" font-family="Courier New, monospace" font-size="12">| Tabela | Kolumna 2 |</text>
      <text x="0" y="440" fill="#ff9ff3" font-family="Courier New, monospace" font-size="12">|--------|-----------|</text>
      <text x="0" y="460" fill="#ff9ff3" font-family="Courier New, monospace" font-size="12">| Dane   | Wiƒôcej    |</text>
    </g>
  </g>

  <!-- Vertical Divider -->
  <line x1="600" y1="60" x2="600" y2="740" stroke="#444" stroke-width="4"/>
  <circle cx="600" cy="400" r="6" fill="#4a9eff" opacity="0.7"/>

  <!-- Preview Panel -->
  <g transform="translate(600, 60)">
    <!-- Panel Header -->
    <rect x="0" y="0" width="600" height="40" fill="rgba(68,68,68,0.8)" stroke="#555" stroke-width="1"/>
    <text x="15" y="25" fill="#ffffff" font-family="Arial, sans-serif" font-size="14" font-weight="600">üëÅÔ∏è PodglƒÖd HTML</text>

    <rect x="320" y="8" width="80" height="24" rx="4" fill="rgba(255,193,7,0.1)" stroke="#ffc107" stroke-width="1"/>
    <text x="360" y="22" fill="#ffc107" font-family="Arial, sans-serif" font-size="10" text-anchor="middle">üìã Kopiuj HTML</text>

    <rect x="410" y="8" width="100" height="24" rx="4" fill="rgba(74,158,255,0.1)" stroke="#4a9eff" stroke-width="1"/>
    <text x="460" y="22" fill="#4a9eff" font-family="Arial, sans-serif" font-size="10" text-anchor="middle">Tryb prezentacji</text>

    <rect x="520" y="8" width="70" height="24" rx="4" fill="rgba(40,167,69,0.1)" stroke="#28a745" stroke-width="1"/>
    <text x="555" y="22" fill="#28a745" font-family="Arial, sans-serif" font-size="10" text-anchor="middle">üìÑ Kopiuj z CSS</text>

    <!-- Preview Content Background -->
    <rect x="0" y="40" width="600" height="600" fill="#f8f9fa"/>

    <!-- Rendered HTML Preview -->
    <g transform="translate(15, 60)">
      <!-- H1 -->
      <text x="0" y="0" fill="#2c3e50" font-family="Arial, sans-serif" font-size="24" font-weight="bold">Witaj w edytorze Markdown!</text>

      <text x="0" y="30" fill="#333" font-family="Arial, sans-serif" font-size="14">Wpisz tutaj sw√≥j tekst w formacie Markdown...</text>

      <!-- H2 -->
      <text x="0" y="60" fill="#2c3e50" font-family="Arial, sans-serif" font-size="20" font-weight="bold">Przyk≈Çady sk≈Çadni:</text>

      <!-- Bold/Italic -->
      <text x="0" y="90" fill="#333" font-family="Arial, sans-serif" font-size="14" font-weight="bold">Pogrubiony tekst</text>
      <text x="0" y="110" fill="#333" font-family="Arial, sans-serif" font-size="14" font-style="italic">Kursywa</text>

      <!-- Lists -->
      <circle cx="5" cy="135" r="2" fill="#333"/>
      <text x="15" y="140" fill="#333" font-family="Arial, sans-serif" font-size="14">Lista element√≥w</text>
      <circle cx="5" cy="155" r="2" fill="#333"/>
      <text x="15" y="160" fill="#333" font-family="Arial, sans-serif" font-size="14">Drugi element</text>

      <!-- Numbered list -->
      <text x="0" y="190" fill="#333" font-family="Arial, sans-serif" font-size="14">1. Lista numerowana</text>
      <text x="0" y="210" fill="#333" font-family="Arial, sans-serif" font-size="14">2. Drugi element</text>

      <!-- Quote -->
      <rect x="0" y="225" width="4" height="40" fill="#4a9eff"/>
      <text x="15" y="240" fill="#666" font-family="Arial, sans-serif" font-size="14" font-style="italic">Cytat</text>
      <text x="15" y="258" fill="#666" font-family="Arial, sans-serif" font-size="14" font-style="italic">Druga linia cytatu</text>

      <!-- Code block -->
      <rect x="0" y="275" width="300" height="80" fill="#2d3748" rx="6"/>
      <text x="10" y="295" fill="#e2e8f0" font-family="Courier New, monospace" font-size="12">function hello() {</text>
      <text x="20" y="315" fill="#e2e8f0" font-family="Courier New, monospace" font-size="12">console.log('Hello World!');</text>
      <text x="10" y="335" fill="#e2e8f0" font-family="Courier New, monospace" font-size="12">}</text>

      <!-- Link -->
      <text x="0" y="375" fill="#4a9eff" font-family="Arial, sans-serif" font-size="14" text-decoration="underline">Link do strony</text>

      <!-- Table -->
      <rect x="0" y="390" width="200" height="20" fill="#f2f2f2" stroke="#ddd" stroke-width="1"/>
      <text x="5" y="404" fill="#333" font-family="Arial, sans-serif" font-size="12" font-weight="bold">Tabela</text>
      <text x="105" y="404" fill="#333" font-family="Arial, sans-serif" font-size="12" font-weight="bold">Kolumna 2</text>

      <rect x="0" y="410" width="200" height="20" fill="#fff" stroke="#ddd" stroke-width="1"/>
      <text x="5" y="424" fill="#333" font-family="Arial, sans-serif" font-size="12">Dane</text>
      <text x="105" y="424" fill="#333" font-family="Arial, sans-serif" font-size="12">Wiƒôcej</text>
    </g>
  </g>

  <!-- Status Bar -->
  <rect x="0" y="740" width="1200" height="60" fill="#333" stroke="#444" stroke-width="1"/>
  <text x="20" y="760" fill="#ccc" font-family="Arial, sans-serif" font-size="12">Znak√≥w: 1247</text>
  <text x="120" y="760" fill="#ccc" font-family="Arial, sans-serif" font-size="12">S≈Ç√≥w: 89</text>
  <text x="200" y="760" fill="#ccc" font-family="Arial, sans-serif" font-size="12">Linii: 45</text>
  <text x="1100" y="760" fill="#4a9eff" font-family="Arial, sans-serif" font-size="12" text-anchor="end">PWA Ready | Offline</text>

  <!-- Interactive Elements - Functional PWA -->
  <foreignObject x="0" y="0" width="1200" height="800">
    <div xmlns="http://www.w3.org/1999/xhtml" style="width: 100%; height: 100%; position: relative;">
      <!-- Hidden PWA Functionality -->
      <div id="pwa-app" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; pointer-events: auto; background: transparent;">

        <!-- Invisible Interactive Areas -->
        <div style="position: absolute; top: 15px; left: 820px; width: 70px; height: 30px; cursor: pointer;" onclick="downloadMarkdown()" title="Pobierz Markdown"></div>
        <div style="position: absolute; top: 15px; left: 900px; width: 80px; height: 30px; cursor: pointer;" onclick="downloadHTML()" title="Pobierz HTML"></div>
        <div style="position: absolute; top: 15px; left: 990px; width: 75px; height: 30px; cursor: pointer;" onclick="copyHTML()" title="Kopiuj HTML do schowka"></div>
        <div style="position: absolute; top: 15px; left: 1075px; width: 60px; height: 30px; cursor: pointer;" onclick="clearEditor()" title="Wyczy≈õƒá edytor"></div>

        <!-- Preview Panel Buttons -->
        <div style="position: absolute; top: 68px; left: 920px; width: 80px; height: 24px; cursor: pointer;" onclick="copyHTML()" title="Kopiuj czysty HTML"></div>
        <div style="position: absolute; top: 68px; left: 1010px; width: 100px; height: 24px; cursor: pointer;" onclick="togglePreviewMode()" title="Tryb prezentacji"></div>
        <div style="position: absolute; top: 68px; left: 1120px; width: 70px; height: 24px; cursor: pointer;" onclick="copyHTMLWithCSS()" title="Kopiuj HTML z inline CSS"></div>

        <!-- Invisible Editor Area -->
        <textarea id="markdown-input" style="position: absolute; top: 100px; left: 15px; width: 570px; height: 580px; background: transparent; border: none; outline: none; color: transparent; font-family: 'Courier New', monospace; font-size: 14px; line-height: 1.6; resize: none; z-index: 10;" placeholder="# Witaj w edytorze Markdown!

Wpisz tutaj sw√≥j tekst w formacie Markdown...

## Przyk≈Çady sk≈Çadni:

**Pogrubiony tekst**
*Kursywa*

- Lista element√≥w
- Drugi element

1. Lista numerowana
2. Drugi element

> Cytat
> Druga linia cytatu

```javascript
// Kod programu
function hello() {
    console.log('Hello World!');
}
```

[Link do strony](https://example.com)

| Tabela | Kolumna 2 |
|--------|-----------|
| Dane   | Wiƒôcej    |
| Inne   | Warto≈õci  |"></textarea>

        <!-- Hidden Preview Area -->
        <div id="html-preview" style="position: absolute; top: 100px; left: 615px; width: 570px; height: 580px; overflow-y: auto; padding: 15px; background: transparent; pointer-events: none;"></div>

        <!-- PWA Installation -->
        <div id="install-prompt" style="position: fixed; bottom: 20px; right: 20px; background: #4a9eff; color: white; padding: 1rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); display: none; z-index: 1001;">
          <p style="margin: 0 0 10px 0; font-family: Arial, sans-serif; font-size: 14px;">Zainstaluj aplikacjƒô na swoim urzƒÖdzeniu!</p>
          <button onclick="installPWA()" style="background: white; color: #4a9eff; border: none; padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer; margin-right: 0.5rem;">Zainstaluj</button>
          <button onclick="dismissInstall()" style="background: rgba(255,255,255,0.2); color: white; border: 1px solid white; padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer;">Nie teraz</button>
        </div>
      </div>

      <!-- Scripts for PWA functionality -->
      <script type="text/javascript">
        //<![CDATA[
        // PWA Service Worker registration
        try {
          if ('serviceWorker' in navigator && 
              window.location.protocol.startsWith('http') && 
              !window.location.href.startsWith('blob:')) {
            
            window.addEventListener('load', function() {
              // Register the service worker
              navigator.serviceWorker.register('sw.js')
                .then(registration => {
                  console.log('ServiceWorker registration successful with scope: ', registration.scope);
                })
                .catch(error => {
                  console.log('ServiceWorker registration failed: ', error);
                });
            });
          } else {
            console.log('Service Worker not registered - not running in HTTP/HTTPS or unsupported environment');
          }
        } catch (e) {
          console.log('Service Worker error:', e);
        }

        // Markdown Parser (simplified)
        function parseMarkdown(markdown) {
          var html = markdown
            // Headers
            .replace(/^### (.*$)/gm, '<h3>$1</h3>')
            .replace(/^## (.*$)/gm, '<h2>$1</h2>')
            .replace(/^# (.*$)/gm, '<h1>$1</h1>')
            // Bold and Italic
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            // Links
            .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" style="color: #4a9eff; text-decoration: underline;">$1</a>')
            // Code blocks
            .replace(/```(\w+)?\n([\s\S]*?)\n```/g, '<pre style="background: #2d3748; color: #e2e8f0; padding: 1rem; border-radius: 6px; overflow-x: auto; margin: 1rem 0;"><code>$2</code></pre>')
            // Inline code
            .replace(/`([^`]+)`/g, '<code style="background: #e9ecef; padding: 0.2rem 0.4rem; border-radius: 3px; font-family: Courier New, monospace;">$1</code>')
            // Lists
            .replace(/^\* (.*)$/gm, '<li style="margin-left: 20px;">$1</li>')
            .replace(/^- (.*)$/gm, '<li style="margin-left: 20px;">$1</li>')
            .replace(/^(\d+)\. (.*)$/gm, '<li style="margin-left: 20px; list-style-type: decimal;">$2</li>')
            // Blockquotes
            .replace(/^> (.*)$/gm, '<blockquote style="border-left: 4px solid #4a9eff; padding-left: 1rem; margin: 1rem 0; font-style: italic; color: #666;">$1</blockquote>')
            // Line breaks
            .replace(/\n/g, '<br>');

          return html;
        }

        // App functionality
        var markdownInput;
        var htmlPreview;
        var deferredPrompt;

        // Initialize elements when DOM is ready
        function initializeApp() {
          try {
            markdownInput = document.getElementById('markdown-input');
            htmlPreview = document.getElementById('html-preview');

            if (!markdownInput || !htmlPreview) {
              console.log('DOM elements not ready, retrying...');
              setTimeout(initializeApp, 100);
              return;
            }

            // Event listeners with error handling
            if (markdownInput && typeof markdownInput.addEventListener === 'function') {
              markdownInput.addEventListener('input', updatePreview);
            }

            // Load saved content
            try {
              var saved = localStorage.getItem('markdown-content-svg');
              if (saved && markdownInput) {
                markdownInput.value = saved;
              }
            } catch (e) {
              console.log('LocalStorage not available:', e);
            }

            updatePreview();

          } catch (err) {
            console.log('App initialization failed:', err);
            // Retry after delay
            setTimeout(initializeApp, 500);
          }
        }

        function updatePreview() {
          try {
            if (!markdownInput || !htmlPreview) return;

            var markdown = markdownInput.value || '';
            var html = parseMarkdown(markdown);
            htmlPreview.innerHTML = html;

            // Save to localStorage with error handling
            try {
              if (typeof Storage !== 'undefined') {
                localStorage.setItem('markdown-content-svg', markdown);
              }
            } catch (e) {
              console.log('Cannot save to localStorage:', e);
            }
          } catch (err) {
            console.log('Preview update failed:', err);
          }
        }

        function downloadMarkdown() {
          if (!markdownInput) return;

          var content = markdownInput.value || markdownInput.placeholder;
          var blob = new Blob([content], { type: 'text/markdown' });
          var url = URL.createObjectURL(blob);
          
          // Create and append the link
          var a = document.createElement('a');
          document.body.appendChild(a);
          a.style.display = 'none';
          a.href = url;
          a.download = 'document.md';
          
          // Trigger the download
          var event = new MouseEvent('click');
          a.dispatchEvent(event);
          
          // Clean up
          setTimeout(function() {
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
          }, 100);
        }

        function downloadHTML() {
          var htmlContent = '<!DOCTYPE html>\n' +
            '<html lang="pl">\n' +
            '<head>\n' +
            '  <meta charset="UTF-8">\n' +
            '  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n' +
            '  <title>Dokument HTML</title>\n' +
            '  <style>\n' +
            '    body { font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; max-width: 800px; margin: 0 auto; padding: 2rem; line-height: 1.6; }\n' +
            '    h1, h2, h3 { margin: 1.5rem 0 0.5rem 0; color: #2c3e50; }\n' +
            '    p { margin: 0.5rem 0; }\n' +
            '    code { background: #f4f4f4; padding: 0.2rem 0.4rem; border-radius: 3px; }\n' +
            '    pre { background: #f4f4f4; padding: 1rem; border-radius: 6px; overflow-x: auto; }\n' +
            '    blockquote { border-left: 4px solid #3498db; padding-left: 1rem; margin: 1rem 0; font-style: italic; color: #666; }\n' +
            '  </style>\n' +
            '</head>\n' +
            '<body>\n' +
            htmlPreview.innerHTML +
            '\n</body>\n' +
            '</html>';

          var blob = new Blob([htmlContent], { type: 'text/html' });
          var url = URL.createObjectURL(blob);
          
          // Create and append the link
          var a = document.createElement('a');
          document.body.appendChild(a);
          a.style.display = 'none';
          a.href = url;
          a.download = 'document.html';
          
          // Trigger the download
          var event = new MouseEvent('click');
          a.dispatchEvent(event);
          
          // Clean up
          setTimeout(function() {
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
          }, 100);
        }

        function copyHTML() {
          var cleanHTML = htmlPreview.innerHTML
            .replace(/ style="[^"]*"/g, '') // Remove inline styles
            .replace(/<br>/g, '\n'); // Replace <br> with newlines for better formatting

          // Check if clipboard API is available
          if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(cleanHTML).then(function() {
              showNotification('‚úÖ Czysty HTML skopiowany do schowka!', '#28a745');
            }).catch(function(err) {
              console.error('B≈ÇƒÖd kopiowania:', err);
              showNotification('‚ùå B≈ÇƒÖd kopiowania HTML', '#dc3545');
            });
          } else {
            // Fallback for older browsers
            try {
              var textArea = document.createElement('textarea');
              textArea.value = cleanHTML;
              document.body.appendChild(textArea);
              textArea.select();
              document.execCommand('copy');
              document.body.removeChild(textArea);
              showNotification('‚úÖ HTML skopiowany do schowka!', '#28a745');
            } catch (err) {
              showNotification('‚ùå Kopiowanie nie jest obs≈Çugiwane', '#dc3545');
            }
          }
        }

        function copyHTMLWithCSS() {
          // Create HTML with inline CSS for better WYSIWYG compatibility
          var htmlWithCSS = htmlPreview.innerHTML;

          // Apply inline styles for common elements
          htmlWithCSS = htmlWithCSS
            .replace(/<h1>/g, '<h1 style="font-size: 2em; font-weight: bold; margin: 1.5rem 0 0.5rem 0; color: #2c3e50;">')
            .replace(/<h2>/g, '<h2 style="font-size: 1.5em; font-weight: bold; margin: 1.5rem 0 0.5rem 0; color: #2c3e50;">')
            .replace(/<h3>/g, '<h3 style="font-size: 1.2em; font-weight: bold; margin: 1.5rem 0 0.5rem 0; color: #2c3e50;">')
            .replace(/<p>/g, '<p style="margin: 0.5rem 0; line-height: 1.6;">')
            .replace(/<strong>/g, '<strong style="font-weight: bold;">')
            .replace(/<em>/g, '<em style="font-style: italic;">')
            .replace(/<li/g, '<li style="margin: 0.25rem 0;"')
            .replace(/<code(?![^>]*style)/g, '<code style="background: #f4f4f4; padding: 0.2rem 0.4rem; border-radius: 3px; font-family: monospace;"')
            .replace(/<pre/g, '<pre style="background: #f4f4f4; padding: 1rem; border-radius: 6px; overflow-x: auto; margin: 1rem 0;"')
            .replace(/<blockquote(?![^>]*style)/g, '<blockquote style="border-left: 4px solid #4a9eff; padding-left: 1rem; margin: 1rem 0; font-style: italic; color: #666;"')
            .replace(/<a href/g, '<a style="color: #4a9eff; text-decoration: underline;" href');

          // Check if clipboard API is available
          if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(htmlWithCSS).then(function() {
              showNotification('‚úÖ HTML z CSS skopiowany do schowka!', '#28a745');
            }).catch(function(err) {
              console.error('B≈ÇƒÖd kopiowania:', err);
              showNotification('‚ùå B≈ÇƒÖd kopiowania HTML z CSS', '#dc3545');
            });
          } else {
            // Fallback for older browsers
            try {
              var textArea = document.createElement('textarea');
              textArea.value = htmlWithCSS;
              document.body.appendChild(textArea);
              textArea.select();
              document.execCommand('copy');
              document.body.removeChild(textArea);
              showNotification('‚úÖ HTML z CSS skopiowany!', '#28a745');
            } catch (err) {
              showNotification('‚ùå Kopiowanie nie jest obs≈Çugiwane', '#dc3545');
            }
          }
        }

        function showNotification(message, color) {
          try {
            if (!document || !document.body) return; // Safety check

            // Create notification element
            var notification = document.createElement('div');
            if (!notification) return;

            notification.style.cssText =
              'position: fixed;' +
              'top: 80px;' +
              'right: 20px;' +
              'background: ' + color + ';' +
              'color: white;' +
              'padding: 1rem 1.5rem;' +
              'border-radius: 8px;' +
              'box-shadow: 0 4px 12px rgba(0,0,0,0.3);' +
              'z-index: 2001;' +
              'font-family: Arial, sans-serif;' +
              'font-size: 14px;' +
              'max-width: 300px;' +
              'word-wrap: break-word;' +
              'transition: opacity 0.3s ease;';

            notification.textContent = message;

            // Add to DOM
            document.body.appendChild(notification);

            // Add simple fade animation
            notification.style.opacity = '0';
            setTimeout(function() {
              notification.style.opacity = '1';
            }, 10);

            // Auto remove after 3 seconds
            setTimeout(function() {
              if (notification && notification.parentNode) {
                notification.style.opacity = '0';
                setTimeout(function() {
                  if (notification && notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                  }
                }, 300);
              }
            }, 3000);

          } catch (err) {
            console.log('Notification failed:', err);
            // Fallback to console
            console.log(message);
          }
        }

        function clearEditor() {
          if (confirm('Czy na pewno chcesz wyczy≈õciƒá edytor?')) {
            markdownInput.value = '';
            updatePreview();
            localStorage.removeItem('markdown-content-svg');
          }
        }

        function togglePreviewMode() {
          var preview = htmlPreview.parentElement;
          if (preview.style.position === 'fixed') {
            preview.style.position = 'absolute';
            preview.style.top = '100px';
            preview.style.left = '615px';
            preview.style.width = '570px';
            preview.style.height = '580px';
            preview.style.zIndex = 'auto';
            preview.style.background = 'transparent';
          } else {
            preview.style.position = 'fixed';
            preview.style.top = '0';
            preview.style.left = '0';
            preview.style.width = '100vw';
            preview.style.height = '100vh';
            preview.style.zIndex = '2000';
            preview.style.background = '#f8f9fa';
          }
        }

        // PWA Install
        try {
          if (typeof window !== 'undefined' && window.addEventListener) {
            window.addEventListener('beforeinstallprompt', function(e) {
              try {
                e.preventDefault();
                deferredPrompt = e;
                setTimeout(function() {
                  var installPrompt = document.getElementById('install-prompt');
                  if (installPrompt) {
                    installPrompt.style.display = 'block';
                  }
                }, 3000);
              } catch (err) {
                console.log('Install prompt error:', err);
              }
            });
          }
        } catch (e) {
          console.log('PWA install listener failed:', e);
        }

        function installPWA() {
          try {
            if (deferredPrompt && typeof deferredPrompt.prompt === 'function') {
              deferredPrompt.prompt();
              if (deferredPrompt.userChoice) {
                deferredPrompt.userChoice.then(function() {
                  deferredPrompt = null;
                  dismissInstall();
                }).catch(function(err) {
                  console.log('Install choice error:', err);
                });
              }
            }
          } catch (err) {
            console.log('Install PWA failed:', err);
          }
        }

        function dismissInstall() {
          try {
            var installPrompt = document.getElementById('install-prompt');
            if (installPrompt) {
              installPrompt.style.display = 'none';
            }
          } catch (err) {
            console.log('Dismiss install failed:', err);
          }
        }

        // Initialize app when DOM is ready
        try {
          if (typeof document !== 'undefined') {
            if (document.readyState === 'loading') {
              document.addEventListener('DOMContentLoaded', initializeApp);
            } else {
              // DOM already loaded
              setTimeout(initializeApp, 50);
            }
          } else {
            // Fallback if document not available
            setTimeout(initializeApp, 100);
          }
        } catch (e) {
          console.log('DOM ready check failed:', e);
          // Last resort - try to initialize anyway
          setTimeout(initializeApp, 200);
        }
        //]]>
      </script>
    </div>
  </foreignObject>
</svg>
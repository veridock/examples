<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 900" style="background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);">
  <defs>
    <style>
      .container {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      }
      .week-container {
        background: white;
        border-radius: 15px;
        padding: 20px;
        margin: 10px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      }
      .nav-btn {
        background: linear-gradient(135deg, #2563eb, #1d4ed8);
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        margin: 5px;
        transition: transform 0.2s;
      }
      .nav-btn:hover {
        transform: translateY(-2px);
      }
      .btn-success {
        background: linear-gradient(135deg, #10b981, #059669);
      }
      .btn-warning {
        background: linear-gradient(135deg, #f59e0b, #d97706);
      }
      .btn-danger {
        background: linear-gradient(135deg, #ef4444, #dc2626);
      }
      .week-title {
        font-size: 24px;
        font-weight: bold;
        color: #1e293b;
        text-align: center;
        margin: 20px 0;
      }
      .week-stats {
        background: #ecfdf5;
        border: 2px solid #10b981;
        border-radius: 10px;
        padding: 15px;
        text-align: center;
        margin: 20px auto;
        max-width: 300px;
      }
      .stat-value {
        font-size: 28px;
        font-weight: bold;
        color: #059669;
      }
      .stat-label {
        font-size: 14px;
        color: #059669;
        margin-top: 5px;
      }
      .day-column {
        background: #f8fafc;
        border: 2px solid #e2e8f0;
        border-radius: 12px;
        padding: 15px;
        margin: 5px;
        min-height: 400px;
        flex: 1;
      }
      .day-header {
        font-size: 16px;
        font-weight: bold;
        color: #2563eb;
        text-align: center;
        margin-bottom: 5px;
      }
      .day-date {
        font-size: 12px;
        color: #64748b;
        text-align: center;
        margin-bottom: 10px;
      }
      .day-hours {
        font-size: 18px;
        font-weight: bold;
        color: #059669;
        text-align: center;
        margin-bottom: 15px;
      }
      .entry-item {
        background: white;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 10px;
        margin-bottom: 10px;
        font-size: 12px;
      }
      .entry-time {
        font-weight: bold;
        color: #374151;
        margin-bottom: 5px;
      }
      .entry-category {
        background: #e0f2fe;
        color: #0369a1;
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 10px;
        margin-bottom: 5px;
        display: inline-block;
      }
      .entry-description {
        color: #64748b;
        margin-bottom: 5px;
        line-height: 1.3;
      }
      .entry-project {
        color: #059669;
        font-size: 10px;
        font-weight: bold;
      }
      .empty-day {
        text-align: center;
        color: #94a3b8;
        margin-top: 50px;
        font-style: italic;
      }
      .sync-panel {
        background: #f0f9ff;
        border: 2px solid #3b82f6;
        border-radius: 10px;
        padding: 15px;
        margin: 15px 0;
      }
      .sync-status {
        font-size: 14px;
        margin-bottom: 10px;
      }
      .sync-indicator {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 8px;
      }
      .sync-active {
        background: #10b981;
        animation: pulse 2s infinite;
      }
      .sync-error {
        background: #ef4444;
      }
      @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
      }
      .week-grid {
        display: flex;
        gap: 10px;
        margin-top: 20px;
      }
      .controls-panel {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 20px;
      }
      .import-zone {
        border: 2px dashed #d1d5db;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        background: #f9fafb;
        margin: 15px 0;
        transition: border-color 0.2s;
      }
      .import-zone:hover {
        border-color: #2563eb;
        background: #f0f9ff;
      }
      .file-input {
        display: none;
      }
    </style>
  </defs>

  <!-- Nag≈Ç√≥wek -->
  <rect fill="url(#headerGrad)" x="0" y="0" width="1200" height="80" rx="0"/>
  <defs>
    <linearGradient id="headerGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#2563eb"/>
      <stop offset="100%" style="stop-color:#1d4ed8"/>
    </linearGradient>
  </defs>
  <text x="600" y="30" text-anchor="middle" fill="white" font-size="28" font-weight="bold">üìÖ PrzeglƒÖdarka Tygodniowa</text>
  <text x="600" y="55" text-anchor="middle" fill="white" font-size="16" opacity="0.9">Automatyczna synchronizacja z ewidencjƒÖ dziennƒÖ</text>

  <!-- Panel kontrolny -->
  <foreignObject x="20" y="90" width="1160" height="180">
    <div class="week-container container">
      <!-- Status synchronizacji -->
      <div class="sync-panel">
        <div class="sync-status">
          <span class="sync-indicator sync-active" id="syncIndicator"></span>
          <span id="syncStatusText">Sprawdzanie synchronizacji...</span>
        </div>
        <div style="font-size: 12px; color: #64748b;">
          Automatyczne od≈õwie≈ºanie co 10 sekund | Ostatnia aktualizacja: <span id="lastUpdateTime">-</span>
        </div>
      </div>

      <!-- Kontrolki nawigacji -->
      <div class="controls-panel">
        <div>
          <button class="nav-btn" onclick="previousWeek()">‚Üê Poprzedni tydzie≈Ñ</button>
          <button class="nav-btn" onclick="nextWeek()">Nastƒôpny tydzie≈Ñ ‚Üí</button>
          <button class="nav-btn" onclick="goToCurrentWeek()">Obecny tydzie≈Ñ</button>
        </div>
        <div>
          <button class="nav-btn btn-success" onclick="exportWeekCSV()">üìä Eksport CSV</button>
          <button class="nav-btn btn-success" onclick="exportWeekJSON()">üìÑ Eksport JSON</button>
          <button class="nav-btn btn-warning" onclick="importData()">üìÇ Import</button>
          <button class="nav-btn btn-danger" onclick="clearWeek()">üóëÔ∏è Wyczy≈õƒá tydzie≈Ñ</button>
        </div>
      </div>

      <!-- Import zone -->
      <div class="import-zone" onclick="importData()" id="importZone">
        <div style="font-size: 16px; margin-bottom: 10px;">üìÇ PrzeciƒÖgnij pliki CSV/JSON lub kliknij aby zaimportowaƒá</div>
        <div style="font-size: 12px; color: #64748b;">Obs≈Çuguje formaty z ewidencji dziennej</div>
        <input type="file" class="file-input" id="fileInput" accept=".csv,.json" multiple>
      </div>
    </div>
  </foreignObject>

  <!-- Tytu≈Ç tygodnia i statystyki -->
  <foreignObject x="20" y="280" width="1160" height="100">
    <div class="week-container container">
      <h2 class="week-title" id="weekTitle">Tydzie≈Ñ: 6-12 stycznia 2025</h2>
      <div class="week-stats">
        <div class="stat-value" id="weekTotalHours">0.0</div>
        <div class="stat-label">Godzin w tygodniu</div>
      </div>
    </div>
  </foreignObject>

  <!-- Siatka dni tygodnia -->
  <foreignObject x="20" y="390" width="1160" height="480">
    <div class="week-container container">
      <div class="week-grid" id="weekGrid">
        <!-- 7 kolumn dni bƒôdzie generowanych dynamicznie -->
      </div>
    </div>
  </foreignObject>

  <!-- JavaScript -->
  <script><![CDATA[
    let currentWeekStart = new Date();
    let allEntries = [];
    let syncInterval;
    
    const dayNames = ['Poniedzia≈Çek', 'Wtorek', '≈öroda', 'Czwartek', 'PiƒÖtek', 'Sobota', 'Niedziela'];
    
    // Inicjalizacja
    document.addEventListener('DOMContentLoaded', function() {
      setCurrentWeekStart();
      initializeApp();
    });

    function initializeApp() {
      setupEventListeners();
      loadAndSyncData();
      renderWeek();
      startAutoSync();
    }

    function setCurrentWeekStart() {
      const today = new Date();
      const dayOfWeek = today.getDay();
      const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;
      currentWeekStart = new Date(today);
      currentWeekStart.setDate(today.getDate() + mondayOffset);
      currentWeekStart.setHours(0, 0, 0, 0);
    }

    function setupEventListeners() {
      const fileInput = document.getElementById('fileInput');
      fileInput.addEventListener('change', handleFileImport);
      
      // Drag & drop
      const importZone = document.getElementById('importZone');
      importZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        importZone.style.borderColor = '#2563eb';
        importZone.style.background = '#eff6ff';
      });
      
      importZone.addEventListener('dragleave', (e) => {
        e.preventDefault();
        importZone.style.borderColor = '#d1d5db';
        importZone.style.background = '#f9fafb';
      });
      
      importZone.addEventListener('drop', (e) => {
        e.preventDefault();
        importZone.style.borderColor = '#d1d5db';
        importZone.style.background = '#f9fafb';
        
        const files = Array.from(e.dataTransfer.files);
        processImportFiles(files);
      });
    }

    function loadAndSyncData() {
      try {
        // ≈Åadowanie z localStorage ewidencji dziennej
        const dailyData = localStorage.getItem('dailyTimeEntries');
        const weeklyData = localStorage.getItem('weeklyTimeEntries');
        
        let loadedEntries = [];
        
        if (dailyData) {
          loadedEntries = loadedEntries.concat(JSON.parse(dailyData));
        }
        
        if (weeklyData) {
          const weekly = JSON.parse(weeklyData);
          // Dodaj tylko te, kt√≥re nie sƒÖ ju≈º w daily
          weekly.forEach(entry => {
            if (!loadedEntries.find(e => e.id === entry.id)) {
              loadedEntries.push(entry);
            }
          });
        }
        
        allEntries = loadedEntries;
        updateSyncStatus('success', `Zsynchronizowano ${allEntries.length} wpis√≥w`);
        
      } catch (error) {
        console.error('B≈ÇƒÖd ≈Çadowania danych:', error);
        updateSyncStatus('error', 'B≈ÇƒÖd synchronizacji danych');
      }
    }

    function startAutoSync() {
      // Synchronizacja co 10 sekund
      syncInterval = setInterval(() => {
        loadAndSyncData();
        updateWeekStats();
        updateLastUpdateTime();
      }, 10000);
      
      updateLastUpdateTime();
    }

    function updateSyncStatus(status, message) {
      const indicator = document.getElementById('syncIndicator');
      const statusText = document.getElementById('syncStatusText');
      
      indicator.className = `sync-indicator sync-${status}`;
      statusText.textContent = message;
    }

    function updateLastUpdateTime() {
      document.getElementById('lastUpdateTime').textContent = 
        new Date().toLocaleTimeString('pl-PL');
    }

    function renderWeek() {
      updateWeekTitle();
      renderWeekGrid();
      updateWeekStats();
    }

    function updateWeekTitle() {
      const weekEnd = new Date(currentWeekStart);
      weekEnd.setDate(weekEnd.getDate() + 6);
      
      const startStr = formatDateShort(currentWeekStart);
      const endStr = formatDateShort(weekEnd);
      
      document.getElementById('weekTitle').textContent = 
        `Tydzie≈Ñ: ${startStr} - ${endStr}`;
    }

    function renderWeekGrid() {
      const grid = document.getElementById('weekGrid');
      grid.innerHTML = '';
      
      for (let i = 0; i < 7; i++) {
        const dayDate = new Date(currentWeekStart);
        dayDate.setDate(dayDate.getDate() + i);
        const dayDateStr = formatDateISO(dayDate);
        
        const dayEntries = allEntries.filter(entry => entry.date === dayDateStr);
        const dayHours = dayEntries.reduce((sum, entry) => sum + parseFloat(entry.duration || 0), 0);
        
        const dayColumn = document.createElement('div');
        dayColumn.className = 'day-column';
        
        dayColumn.innerHTML = `
          <div class="day-header">${dayNames[i]}</div>
          <div class="day-date">${formatDateShort(dayDate)}</div>
          <div class="day-hours">${dayHours.toFixed(1)}h</div>
          ${dayEntries.length === 0 ? 
            '<div class="empty-day">Brak wpis√≥w</div>' :
            dayEntries.map(entry => `
              <div class="entry-item">
                <div class="entry-time">${entry.startTime} - ${entry.endTime} (${entry.duration}h)</div>
                <div class="entry-category">${entry.category}</div>
                <div class="entry-description">${truncateText(entry.description, 60)}</div>
                ${entry.project ? `<div class="entry-project">üìÅ ${entry.project}</div>` : ''}
              </div>
            `).join('')
          }
        `;
        
        grid.appendChild(dayColumn);
      }
    }

    function updateWeekStats() {
      const weekEnd = new Date(currentWeekStart);
      weekEnd.setDate(weekEnd.getDate() + 6);
      
      const weekEntries = allEntries.filter(entry => {
        const entryDate = new Date(entry.date);
        return entryDate >= currentWeekStart && entryDate <= weekEnd;
      });
      
      const totalHours = weekEntries.reduce((sum, entry) => sum + parseFloat(entry.duration || 0), 0);
      document.getElementById('weekTotalHours').textContent = totalHours.toFixed(1);
    }

    function previousWeek() {
      currentWeekStart.setDate(currentWeekStart.getDate() - 7);
      renderWeek();
    }

    function nextWeek() {
      currentWeekStart.setDate(currentWeekStart.getDate() + 7);
      renderWeek();
    }

    function goToCurrentWeek() {
      setCurrentWeekStart();
      renderWeek();
    }

    function exportWeekCSV() {
      const weekEnd = new Date(currentWeekStart);
      weekEnd.setDate(weekEnd.getDate() + 6);
      
      const weekEntries = allEntries.filter(entry => {
        const entryDate = new Date(entry.date);
        return entryDate >= currentWeekStart && entryDate <= weekEnd;
      });
      
      if (weekEntries.length === 0) {
        alert('Brak wpis√≥w w tym tygodniu!');
        return;
      }
      
      const headers = ['Data', 'Dzie≈Ñ tygodnia', 'Godzina rozpoczƒôcia', 'Godzina zako≈Ñczenia', 'Czas trwania (h)', 'Kategoria', 'Opis czynno≈õci', 'Projekt', 'Data utworzenia'];
      
      const csvData = weekEntries
        .sort((a, b) => a.date.localeCompare(b.date) || a.startTime.localeCompare(b.startTime))
        .map(entry => {
          const entryDate = new Date(entry.date);
          const dayIndex = entryDate.getDay() === 0 ? 6 : entryDate.getDay() - 1;
          
          return [
            entry.date,
            dayNames[dayIndex],
            entry.startTime,
            entry.endTime,
            entry.duration,
            entry.category,
            `"${(entry.description || '').replace(/"/g, '""')}"`,
            entry.project || '',
            entry.created || ''
          ];
        });
      
      const csvContent = [headers, ...csvData]
        .map(row => row.join(','))
        .join('\n');
      
      const startStr = formatDateFile(currentWeekStart);
      const endStr = formatDateFile(weekEnd);
      
      downloadFile(csvContent, `ewidencja-tydzien-${startStr}-${endStr}.csv`, 'text/csv');
      showNotification('Eksport CSV tygodnia zako≈Ñczony!');
    }

    function exportWeekJSON() {
      const weekEnd = new Date(currentWeekStart);
      weekEnd.setDate(weekEnd.getDate() + 6);
      
      const weekEntries = allEntries.filter(entry => {
        const entryDate = new Date(entry.date);
        return entryDate >= currentWeekStart && entryDate <= weekEnd;
      });
      
      if (weekEntries.length === 0) {
        alert('Brak wpis√≥w w tym tygodniu!');
        return;
      }
      
      const exportData = {
        metadata: {
          exportDate: new Date().toISOString(),
          weekStart: formatDateISO(currentWeekStart),
          weekEnd: formatDateISO(weekEnd),
          totalEntries: weekEntries.length,
          totalHours: weekEntries.reduce((sum, e) => sum + parseFloat(e.duration || 0), 0).toFixed(2),
          version: '1.0'
        },
        entries: weekEntries.sort((a, b) => a.date.localeCompare(b.date) || a.startTime.localeCompare(b.startTime))
      };
      
      const jsonContent = JSON.stringify(exportData, null, 2);
      const startStr = formatDateFile(currentWeekStart);
      const endStr = formatDateFile(weekEnd);
      
      downloadFile(jsonContent, `ewidencja-tydzien-${startStr}-${endStr}.json`, 'application/json');
      showNotification('Eksport JSON tygodnia zako≈Ñczony!');
    }

    function importData() {
      document.getElementById('fileInput').click();
    }

    function handleFileImport(event) {
      const files = Array.from(event.target.files);
      processImportFiles(files);
      event.target.value = ''; // Reset
    }

    function processImportFiles(files) {
      if (files.length === 0) return;
      
      let processedFiles = 0;
      let importedEntries = 0;
      
      files.forEach(file => {
        const reader = new FileReader();
        reader.onload = function(e) {
          try {
            let newEntries = [];
            
            if (file.name.endsWith('.json')) {
              const data = JSON.parse(e.target.result);
              newEntries = data.entries || data;
            } else if (file.name.endsWith('.csv')) {
              newEntries = parseCSV(e.target.result);
            }
            
            // Dodaj nowe wpisy (bez duplikat√≥w)
            newEntries.forEach(entry => {
              if (!allEntries.find(existing => 
                existing.date === entry.date && 
                existing.startTime === entry.startTime && 
                existing.description === entry.description
              )) {
                entry.id = entry.id || Date.now() + Math.random();
                allEntries.push(entry);
                importedEntries++;
              }
            });
            
            processedFiles++;
            if (processedFiles === files.length) {
              // Zapisz zaimportowane dane
              localStorage.setItem('weeklyTimeEntries', JSON.stringify(allEntries));
              renderWeek();
              showNotification(`Zaimportowano ${importedEntries} nowych wpis√≥w z ${files.length} plik√≥w!`);
            }
            
          } catch (error) {
            console.error('B≈ÇƒÖd importu:', error);
            showNotification(`B≈ÇƒÖd importu pliku: ${file.name}`, 'error');
          }
        };
        
        reader.readAsText(file, 'UTF-8');
      });
    }

    function parseCSV(csvText) {
      const lines = csvText.split('\n');
      const headers = lines[0].split(',').map(h => h.trim());
      const entries = [];
      
      for (let i = 1; i < lines.length; i++) {
        const line = lines[i].trim();
        if (!line) continue;
        
        const values = parseCSVLine(line);
        if (values.length < 3) continue;
        
        const entry = {
          id: Date.now() + i,
          date: values[0] || '',
          startTime: values[1] || values[2] || '',
          endTime: values[2] || values[3] || '',
          duration: values[3] || values[4] || '0',
          category: values[4] || values[5] || 'Inne B+R',
          description: values[5] || values[6] || '',
          project: values[6] || values[7] || '',
          created: values[7] || values[8] || new Date().toISOString()
        };
        
        // Walidacja podstawowa
        if (entry.date && entry.startTime && entry.endTime) {
          entries.push(entry);
        }
      }
      
      return entries;
    }

    function parseCSVLine(line) {
      const result = [];
      let current = '';
      let inQuotes = false;
      
      for (let i = 0; i < line.length; i++) {
        const char = line[i];
        
        if (char === '"') {
          inQuotes = !inQuotes;
        } else if (char === ',' && !inQuotes) {
          result.push(current.trim().replace(/^"|"$/g, ''));
          current = '';
        } else {
          current += char;
        }
      }
      
      result.push(current.trim().replace(/^"|"$/g, ''));
      return result;
    }

    function clearWeek() {
      if (!confirm('UsunƒÖƒá wszystkie wpisy z tego tygodnia? Ta operacja jest nieodwracalna!')) {
        return;
      }
      
      const weekEnd = new Date(currentWeekStart);
      weekEnd.setDate(weekEnd.getDate() + 6);
      
      const entriesBeforeCount = allEntries.length;
      allEntries = allEntries.filter(entry => {
        const entryDate = new Date(entry.date);
        return !(entryDate >= currentWeekStart && entryDate <= weekEnd);
      });
      
      localStorage.setItem('weeklyTimeEntries', JSON.stringify(allEntries));
      renderWeek();
      
      const removedCount = entriesBeforeCount - allEntries.length;
      showNotification(`Usuniƒôto ${removedCount} wpis√≥w z tego tygodnia!`);
    }

    function downloadFile(content, filename, contentType) {
      const blob = new Blob([content], { type: contentType + ';charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    }

    function showNotification(message, type = 'success') {
      const notification = document.createElement('div');
      notification.style.cssText = `
        position: fixed; top: 20px; right: 20px; z-index: 1000;
        background: ${type === 'error' ? '#ef4444' : '#10b981'};
        color: white; padding: 15px 20px; border-radius: 8px;
        font-size: 14px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        max-width: 400px; word-wrap: break-word;
      `;
      notification.textContent = message;
      document.body.appendChild(notification);
      
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 4000);
    }

    function truncateText(text, maxLength) {
      if (!text) return '';
      return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
    }

    function formatDateShort(date) {
      return `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}`;
    }

    function formatDateISO(date) {
      return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
    }

    function formatDateFile(date) {
      return formatDateISO(date);
    }

    // Cleanup przy zamkniƒôciu
    window.addEventListener('beforeunload', () => {
      if (syncInterval) {
        clearInterval(syncInterval);
      }
    });
  ]]></script>
</svg>